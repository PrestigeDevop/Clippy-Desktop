var e={m:{},d:(t,a)=>{for(var s in a)e.o(a,s)&&!e.o(t,s)&&Object.defineProperty(t,s,{enumerable:!0,get:a[s]})},u:e=>e+".js",o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t)};(()=>{var t;if("string"==typeof import.meta.url&&(t=import.meta.url),!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),e.p=t})(),e.b=document.baseURI||self.location.href;var t={};e.d(t,{I:()=>a});class a{constructor(e,t,a,s,r){this.type=e,this.url=t,this.init_callback=a,this.write_result_callback=s,this.on_complete_callback=r}load_worker(){"GGUF_CPU"===this.type&&(this.worker=new Worker(new URL(e.p+e.u(117),e.b),{type:"module"})),this.worker.onmessage=e=>{switch(e.data.event){case 1:this.init_callback&&this.init_callback();break;case 3:this.write_result_callback&&this.write_result_callback(e.data.line);break;case 4:this.on_complete_callback&&this.on_complete_callback()}},async function(e,t){let a=null,s=self;if(void 0===s)console.log("Oops, `window` is not defined");else if(s&&s.caches){a=await s.caches.open("llmjs-cache");const r=await a.match(e);if(r){const e=await r.arrayBuffer(),a=new Uint8Array(e);return void t(a)}}const r=new XMLHttpRequest;r.open("GET",e,!0),r.responseType="arraybuffer",r.onload=async s=>{const o=r.response;if(o){const s=new Uint8Array(o);a&&await a.put(e,new Response(o)),t(s)}},r.send(null)}(this.url,(e=>{this.worker.postMessage({event:0,model_bytes:e})}))}run({prompt:e,seed:t=-1,max_token_len:a=50,top_k:s=40,top_p:r=.9,temp:o=1,repeat_last_n:n=64,repeat_penalty:l=1.176,context_size:i=512}={}){this.worker.postMessage({event:2,prompt:e,seed:t,max_token_len:a,top_k:s,top_p:r,temp:o,repeat_last_n:n,repeat_penalty:l,context_size:i})}}var s=t.I;export{s as LLM};